;; bridge_address: MsgAdrr, oracles_address: MsgAddr, oracles: Dict, state_flags: uint8, burn_bridge_fee: Coins
;; Returns bridge address
slice set_test_bridge_conf() impure inline_ref {

   int addr        = random();
   slice oc_addr   = begin_cell().store_uint(random(), 256).end_cell().begin_parse();
   cell oracle_tbl = udict_set(new_dict(), 256, random(), oc_addr);
   cell new_conf   = begin_cell().store_uint(addr, 256)
                                 .store_uint(test_oracle_addr, 256) ;; Oracles addr
                                 .store_dict(oracle_tbl)
                                 .store_uint(0, 8)
                                 .store_grams(test_bridge_burn_fee) ;; 0.1 fee
                                 .end_cell();
   cell config   = get_config();

   config~idict_set_ref(32, 79, new_conf);
   set_global_config(config);

   return generate_internal_address_with_custom_data(0, -1, addr);
}

cell test_minter_content() inline {
{-
  Current state of minter_data.fif

  <b
    1 32 u, // chain id
     0xf0d8c9578937bfda05bd4ed5f2cfa14e7cdc267a 256 u, // Token eth addr
    9 8 u, // 9 decimals
    <b
      "TEST TOKEN" $,
    b> ref,
    <b
      "TST" $,
    b> ref,
  b>
-}
    cell name = begin_cell().store_slice("TEST TOKEN").end_cell();
    cell sym  = begin_cell().store_slice("TST").end_cell();

    return begin_cell().store_uint(1, 32)
                       .store_uint(test_token_addr, 256)
                       .store_uint(9, 8)
                       .store_ref(name)
                       .store_ref(sym)
           .end_cell();

}

slice test_calculate_jetton_wallet_address(cell state_init) inline {
    return begin_cell().store_uint(4, 3)
            .store_int(workchain(), 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

(slice, cell) test_calculate_minter_address(cell wrapped_token_data, cell jetton_wallet_code, jetton_minter_code) impure inline_ref {
    ;; (slice collector_address, cell jetton_minter_code, cell jetton_wallet_code) = load_data();

    cell jetton_minter_data = begin_cell()
            .store_coins(0) ;; total_supply
            .store_ref(wrapped_token_data)
            .store_ref(jetton_wallet_code)
            .end_cell();

    cell jetton_minter_state_init = begin_cell()
            .store_uint(0, 2)
            .store_dict(jetton_minter_code)
            .store_dict(jetton_minter_data)
            .store_uint(0, 1)
            .end_cell();

    slice minter_address = test_calculate_jetton_wallet_address(jetton_minter_state_init); ;; calculate minter address by init_state
    return (minter_address, jetton_minter_state_init);
}

slice generate_eth_addr() {
    int min = (1 << 159) + 1;
    int max = 1 << 160;

    return begin_cell().store_uint(rand(max - min) + min, 160).end_cell().begin_parse();
}

slice generate_different_addr(slice old) {
    ;; Generates different address with same wc
    (int wc, int hash)  = old.parse_std_addr();
    int new_hash        = 0;

    do {
        new_hash = random();
    } until(new_hash != hash);

    return generate_internal_address_with_custom_data(0, wc, new_hash);
}

builder generate_bridge_burn_notification(int query_id, int burn_amount, slice sender, slice resp, slice dst) inline {
    return generate_jetton_burn_notification( query_id, burn_amount, sender, resp).store_slice(dst);
}

cell generate_fwd_coins(int minter, int wallet, int forward) {
    return begin_cell().store_grams(minter)
                       .store_grams(wallet)
                       .store_grams(forward)
           .end_cell();

}

builder generate_bridge_voting_swap(int query_id, int chash,
                                    int idx, int wc,
                                    int addr, int amount,
                                    cell token_data, cell fwd) {

    return generate_internal_message_body(op::execute_voting(), query_id).store_uint(op::execute_voting::swap(), 8)
                                                                         .store_uint(chash, 256)
                                                                         .store_uint(idx, 16)
                                                                         .store_uint(wc, 8)
                                                                         .store_uint(addr, 256)
                                                                         .store_grams(amount)
                                                                         .store_ref(token_data)
                                                                         .store_ref(fwd);
}

_ verify_bridge_excess(cell msg, int code, int query_id, slice resp_dst, int msg_value) impure inline {
	{-
	TL-B schema: excesses#d53276db query_id:uint64 = InternalMsgBody;
	Excess message should be sent to resp_dst with all of the msg_value - fees taken to process
	We verify that:
	1) message is sent to resp_dst
	2) attached amount is at least msg_value - forward_fee * 2
	3) op matches excess op
	4) query_id matches request query_id
	-}

	tuple parsed_msg = unsafe_tuple(parse_internal_message( msg ));

	;;Check dst_addr to be equal to resp_dst
	throw_unless( code + 1, equal_slices( resp_dst, parsed_msg.at(4) ) );

	int total_sent  = parsed_msg.at(5);
	int should_sent = msg_value - test_bridge_burn_fee;

	throw_unless( code + 2, total_sent >= should_sent );

	slice msg_body = parsed_msg.at(8);

	throw_unless( code + 3, op_excesses == msg_body~load_uint(32));

	throw_unless( code + 4, query_id == msg_body~load_uint(64));
}
_ assert_log_message(cell msg, int code, int event, int exp_dst, int jetton_amount, int token_addr) impure inline {

	tuple parsed_msg = unsafe_tuple(parse_external_message( msg ));
    tuple dst_ext    = parsed_msg.at(1).parse_addr();
    throw_unless(code, event == dst_ext.second().preload_uint(256));

    slice bs = parsed_msg.at(5);

    throw_unless(code + 1, exp_dst == bs~load_uint(160));
    throw_unless(code + 2, jetton_amount == bs~load_uint(64));
    throw_unless(code + 3, token_addr == bs~load_uint(160));
    throw_unless(code + 4, bs.slice_empty?());

}


